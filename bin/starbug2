#!/usr/bin/python3 -Wignore
"""Starbug II - JWST PSF photometry
usage: starbug2 [-ABDfGhMPSv] [-b bgdfile] [-d apfile] [-n ncores] [-o directory] [-p file.param] [-s opt=val] image.fits ...
   -A  --apphot          : run aperture photometry on a source list
   -B  --background      : run background estimation
   -b  --bgdfile         : load background (-bgd.fits) file
   -d  --apfile  ap.fits : load a source detection (-ap.fits) file to skip the source detection step
   -D  --detect          : run source detection
   -f  --find            : attempt to find associated -ap -bgd files
   -G  --geom            : calculate geometric stats on source list
   -h  --help            : display uasage information
   -M  --match           : match outputs from all input image files
   -n  --ncores      num : number of CPU cores to split process between
   -o  --output      dir : output directory
   -p  --param   a.param : load parameter file
   -P  --psf             : run psf photometry
   -s  --set      option : set value in parameter file at runtime (-s SIGSKY=3)
   -S  --subbgd          : subtract background from image
   -v  --verbose         : display verbose outputs

   --> Single run commands
       --init                     : Initialise Starbug (post install)
       --local-param              : Make a local copy of the default parameter file
       --update-param             : Update an out-of-date local parameter file
       --generate-psf             : Generate a single PSF. Set FILTER, DET_NAME, PSF_SIZE with -s
       --generate-region   a.fits : Make a ds9 region file with a detection file
       --generate-run      *.fits : Generate a simple run script
       --clean-table       a.fits : Clean up an individual table
       --version                  : Print starbug2 version

       --apply-zeropint    a.fits : Apply a zeropoint (-s ZEROPOINT=1.0) to a.fits
       --calc-instr-zp     a.fits : Calculate and apply an instrumental zero point onto a.fits

   --> typical runs
      $~ starbug2 -vD -p file.param image.fits      //Source detect on image with a parameter file
      $~ starbug2 -vDM -n4 images*.fits             //Source detect and match outputs of a list of images
      $~ starbug2 -vd image-ap.fits -BP image.fits  //PSF photometry on an image with a source file (image-ap.fits)

"""

help_opts={
        "apphot":"(-a|--apphot) : Conduct aperture photometry on the image. This routine requires a source list to be loaded with '-d sourcelist.fits' and must be a fits table containing at least columns called 'xcentroid' and 'ycentroid' or 'RA' and 'DEC'.",
        "help":"(-h|--help) : Display help information for starbug2. If verbose flag '-v' is given then a rundown of every available command is included. For detailed information about each option, use '-h detect'."
        }

import os,sys,getopt
#sys.stdout.write("loading..\r")
sys.stdout.write("\x1b[1mlaunching \x1b[36mstarbug\x1b[0m\n")
import pkg_resources
from starbug2.utils import *
from starbug2.misc import *

VERBOSE= 0x01
KILLPROC=0x02
STOPPROC=0x04
FINDFILE=0x08

DODETECT=0x100
DOBGDEST=0x200
DOPHOTOM=0x400
#DOCLEAN= 0x800 
DOARTIFL=0x1000
DOMATCH= 0x2000
DOAPPHOT=0x4000
DOBGDSUB=0x8000
DOGEOM  =0x10000

GENRATPSF =0x100000
GENRATRUN =0x200000
GENRATREG =0x400000
INITSB    =0x800000
UPDATEPRM =0x1000000
DODEBUG   =0x2000000
CALCINSTZP=0x4000000
APPLYZP   =0x8000000


options=0

pfile=None
setopt={}
output='.'
ncores=1

def usage(option=None):
    if option and option in help_opts.keys():
        perror("usage %s\n"%help_opts.get(option))
        quit(0)

    if not (options&VERBOSE): perror("%s\n"%__doc__.split('\n')[1])
    else: perror(__doc__)
    quit(0)

opts,args=getopt.gnu_getopt(sys.argv[1:],"ABDfGhMPSvb:d:n:o:p:s:", ("apphot","background", "detect", "find", "geom", "help", "match", "psf", "subbgd", "verbose", "xtest",
                                                      "bgdfile=", "apfile=", "ncores=", "output=", "param=", "set=",
                                                      "init", "generate-psf", "local-param", "generate-region=", "clean-table", "version", "generate-run", "update-param",
                                                      "calc-instr-zp=", "apply-zeropoint=",
                                                      "debug"))
for opt,optarg in opts:
    if opt in ("-h","--help"):    
        get_help=help_opts.keys() & set(args)
        usage( option= get_help.pop() if get_help else "")

    if opt in ("-p","--param"):   pfile= optarg
    if opt in ("-v","--verbose"):
        options|=VERBOSE

    if opt in ("-A","--apphot"): options |= DOAPPHOT
    if opt in ("-B","--background"): options|=DOBGDEST
    if opt in ("-D","--detect"): options |= DODETECT
    if opt in ("-G","--geom"): options |= DOGEOM
    if opt in ("-M","--match"):  options |= DOMATCH
    if opt in ("-P","--psf"): options |= DOPHOTOM
    if opt in ("-S","--subbgd"): options |= DOBGDSUB

    if opt in ("-d","--apfile"):
        if os.path.exists(optarg): setopt["AP_FILE"]=optarg
        else: perror("AP_FILE \"%s\" does not exist\n"%optarg)

    if opt in ("-b","--bgdfile"):
        if os.path.exists(optarg): setopt["BGD_FILE"]=optarg
        else: perror("BGD_FILE \"%s\" does not exist\n"%optarg)

    if opt in ("-f","--find"): options|=FINDFILE
    if opt in ("-n","--ncores"): ncores=int(optarg)

    if opt in ("-o","--output"):
        output=optarg
        setopt["OUTPUT"]=optarg

    if opt in ("-s","--set"): 
        if '=' in optarg:
            key,val=optarg.split('=')
            try: val=float(val)
            except: pass
            setopt[key]=val
        else:
            perror("unable to set parameter, use syntax -s KEY=VALUE\n")
            options|=KILLPROC

    if opt=="--init": options|=(INITSB|STOPPROC)
    if opt=="--generate-psf": options|=(GENRATPSF|STOPPROC)
    if opt=="--update-param": options|=(UPDATEPRM|STOPPROC)
    if opt=="--generate-run": options|=(GENRATRUN|STOPPROC)
    if opt=="--debug":
        os.environ["SBIIDEBUG"]="/tmp/starbug.log"
        #open("/tmp/starbug.log","w").close()

    if opt=="--local-param":
        os.system("cp %s/default.param starbug.param"%pkg_resources.resource_filename("starbug2","param/"))
        printf("--> generating starbug.param\n")
        options|=STOPPROC

    if opt=="--generate-region":
        setopt["REGION_TAB"]=optarg
        options|=(GENRATREG|STOPPROC)

    if opt=="--clean-table":
        printf("cleaning table <-- %s\n"%optarg)
        table=Table.read(optarg,format="fits")#load_table(optarg)
        options|=STOPPROC

    if opt=="--version": 
        printf(starbug2.logo%("starbug2-v%s"%pkg_resources.get_distribution("starbug2").version))
        options|=STOPPROC

    if opt=="--calc-instr-zp":
        setopt["ZP_PSF_CAT"]=optarg
        options|=(CALCINSTZP|APPLYZP|STOPPROC)
    if opt=="--apply-zeropoint":
        setopt["ZP_PSF_CAT"]=optarg
        options|=(APPLYZP|STOPPROC)



##############################################
# Options set, verify/run one time functions #
##############################################

## Load parameter files
if pfile==None:
    if os.path.exists("./starbug.param"):pfile="starbug.param"
    else:
        #perror("no local parameter file found, using default.param\n")
        pfile="%s/default.param"%pkg_resources.resource_filename("starbug2","param/")

init_parameters=load_params(pfile)
#for key in set(setopt.keys() & init_parameters.keys()):
init_parameters.update(setopt)



#########################
# One time run commands #
#########################

if options&INITSB:
    init_starbug()

if options&GENRATPSF:
    if (fltr:=init_parameters.get("FILTER")):
        detector=init_parameters.get("DET_NAME")
        psf_size=init_parameters.get("PSF_SIZE")
        printf("Generating PSF: %s %s (%d)\n"%(fltr,detector,psf_size))
        psf=generate_psf(fltr, detector=detector, fov_pixels=psf_size)
        if psf: 
            name="%s%s.fits"%(fltr,"" if detector is None else detector)
            printf("--> %s\n"%name)
            psf.writeto(name, overwrite=True)
        else: perror("PSF Generation failed :(\n")
    else: perror("Unable to generate PSF. Set filter with '-s FILTER=FXXX'\n")





if options&GENRATRUN:
    cmd="starbug2 "#"+ " ".join( ["-vf"])
    generate_runscript(args, cmd)

if options&UPDATEPRM:
    update_paramfile(pfile)

if options&GENRATREG:
    fname=setopt.get("REGION_TAB")
    if fname and os.path.exists(fname):
        table=Table.read(fname,format="fits")
        _,name,_=split_fname(fname)
        export_region(table, colour=init_parameters["REGION_COL"], scale_radius=init_parameters["REGION_SCAL"],
                             region_radius=init_parameters["REGION_RAD"], xcol=init_parameters["REGION_XCOL"],
                             ycol=init_parameters["REGION_YCOL"], wcs=init_parameters["REGION_WCS"], fname="%s/%s.reg"%(output,name))
        printf("generating region --> %s/%s.reg\n"%(output,name))

###########################
# instrumental zero point #
###########################
if options&APPLYZP:
    _fname=setopt.get("ZP_PSF_CAT")
    _zp=setopt.get("ZEROPOINT")
    _std=0
    if _fname and os.path.exists(_fname):
        psftable=Table.read(_fname, format="fits")
        with fits.open(_fname) as fp: _header=fp[1].header ##thats a bit rubbish

        if (fltr:=_header.get("FILTER")) is None:
            if (fltr:=setopt.get("FILTER")) is None:
                perror("Unable to determine table FILTER: set manually with `-s FILTER=F000W`\n")
                quit(1) ## thats a bit hardcore

        if options&CALCINSTZP:
            _aptable=None
            _apfname=setopt.get("AP_FILE")
            if _apfname and os.path.exists(_apfname):
                _aptable=Table.read(_apfname, format="fits")

                if (res:=calc_instrumental_zeropint(psftable, _aptable, fltr=fltr)) is not None:
                    _zp,_std=res

        if _zp is not None:
            psftable.meta["%s ZEROPOINT"%fltr]=_zp
            psftable.meta["%s eZEROPOINT"%fltr]=_std
            psftable[fltr]=psftable[fltr]+_zp

            dname,fname,_=split_fname(_fname)
            printf("--> %s/%s-zp.fits\n"%(dname,fname))
            export_table( psftable, fname="%s/%s-zp.fits"%(dname,fname), header=_header)
        else: perror("Unable to set ZEROPOINT, set it with -sZEROPOINT=000\n")
    else: perror("Unable to locate table \"%s\".\n"%_fname)

if options&STOPPROC: quit(0) ## quiet ending the process if required

if len(args)==0: 
    perror("must include fits image file\n")
    options|=KILLPROC

if options&KILLPROC:
    perror("..quitting :(\n\n")
    usage()

############################################################################
# All the options set and one-time run functions done, Time to run Starbug #
############################################################################

import starbug2
from starbug2.starbug import StarbugBase ## Ive put this here because it takes some time
from starbug2.matching import dither_match
from multiprocessing import Pool

def fn(fname):
    sb=None
    if os.path.exists(fname):
        dname,bname,ext=split_fname(fname)

        if options&FINDFILE:
            ap="%s/%s-ap.fits"%(dname,bname)
            bgd="%s/%s-bgd.fits"%(dname,bname)
            if os.path.exists(ap)  and not setopt.get("AP_FILE"):  setopt["AP_FILE"]=ap
            if os.path.exists(bgd) and not setopt.get("BGD_FILE"): setopt["BGD_FILE"]=bgd

        ## Sorting out the stdout
        if options&VERBOSE:
            setopt["VERBOSE"]=1
            if ncores>1:
                if fname==args[0]:
                    printf("showing starbug stdout for \"%s\"\n"%fname)
                else:
                    setopt["VERBOSE"]=0
                    puts("-> hiding \"%s\""%fname)
        else:
            puts(fname)

        if ext==".fits":
            sb=StarbugBase(fname, pfile=pfile, options=setopt)
            if sb.verify(): 
                pass
                #_input=input("Continue with warnings y/N:")
                #if _input=="" or _input not in "yY":
                #    return#quit("..quitting :(")

            if options & DODETECT: sb.detect()
            if options & DOBGDEST: sb.bgd_estimate()
            if options & DOBGDSUB: sb.bgd_subtraction()
            if options & DOGEOM: sb.source_geometry()

            if options & DOAPPHOT: sb.aperture_photometry()
            if options & DOPHOTOM: sb.photometry()

            if options & DOARTIFL: sb.artificial_stars()
            #sb.export(outdir=output)

        else: perror("file must be type '.fits' not %s\n"%ext)
    else: perror("can't access %s\n"%fname)
    return sb

if __name__=="__main__":
    puts(starbug2.logo%starbug2.motd)

    if ncores==1: starbugs=[ fn(fname) for fname in args ]
    else:
        pool=Pool(processes=ncores)
        starbugs=pool.map(fn,args) ##
        pool.close()

    for n,sb in enumerate(starbugs): 
        if not sb: perror("FAILED: %s\n"%args[n])

    ###########################
    # Match Output Catalogues #
    ###########################

    if options&DOMATCH and len(starbugs)>1:
        if options&VERBOSE: printf("Matching outputs\n")

        if (fname:=combine_fnames( [sb.fname for sb in starbugs] )):
            _,name,_=split_fname(os.path.basename(fname))
            fname="%s/%s"%(starbugs[0].outdir, name)
        else: fname="out"

        header=starbugs[0].header
        colnames=starbug2.match_cols
        colnames+=[ name for name in init_parameters["MATCH_COLS"].split() if name not in colnames]
        dthreshold=init_parameters["MATCH_THRESH"]
        nthreshold=init_parameters["NEXP_THRESH"]


        if options&(DODETECT|DOAPPHOT):
            av,full=dither_match([sb.detections for sb in starbugs], threshold=dthreshold, colnames=colnames)

            if nthreshold>0:
                mask=av["NUM"] >= nthreshold
            else: mask=np.ones(len(av),dtype=bool)

            av.meta.update(header)
            printf("-> %s-ap*...\n"%(fname))
            export_table(full, fname="%s-apfull.fits"%(fname), header=header)
            export_table(av[mask], fname="%s-apmatch.fits"%(fname), header=header)

        if options&DOPHOTOM:
            av,full=dither_match([sb.psfcatalogue for sb in starbugs], threshold=dthreshold, colnames=colnames)

            if nthreshold>0:
                mask=av["NUM"] >= nthreshold
            else: mask=np.ones(len(av))

            av.meta.update(header)
            printf("-> %s-psf*...\n"%(fname))
            export_table(full, fname="%s-psffull.fits"%(fname), header=header)
            export_table(av[mask], fname="%s-psfmatch.fits"%(fname), header=header)

